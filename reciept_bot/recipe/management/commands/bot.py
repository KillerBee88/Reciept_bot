import random
from django.core.management.base import BaseCommand
from reciept_bot.settings import TELEGRAM_TOKEN
from telebot import TeleBot
from telebot.types import KeyboardButton, ReplyKeyboardMarkup
from recipe.models import Recipe, Subscription, Categories, Client, LikeDislike, UserCategoryView

bot = TeleBot(TELEGRAM_TOKEN, threaded=False)


@bot.message_handler(commands=['start'])
def main_menu(message):
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    welcome_message = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ' \
                      f'–ø—Ä–æ—Å–∏–º –≤–∞—Å –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 100 —ç—Ñ–∏–æ–ø—Å–∫–∏—Ö —Ç—É–≥—Ä–∏–∫–æ–≤'
    kb_welcome = ReplyKeyboardMarkup(one_time_keyboard=True)
    kb_welcome_btn = (
        KeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å üö´'),
        KeyboardButton(text='–£–∂–µ –æ–ø–ª–∞—Ç–∏–ª üöª'),
    )
    kb_welcome.add(*kb_welcome_btn)
    bot.send_message(message.chat.id, welcome_message, reply_markup=kb_welcome)


@bot.message_handler(func=lambda message: message.text == '–û–ø–ª–∞—Ç–∏—Ç—å üö´')
def handle_payment(message):
    bot.send_message(message.chat.id, '–ó–∞–∫—Ä—ã—Ç–æ –Ω–∞ —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ')


@bot.message_handler(func=lambda message: message.text == '–£–∂–µ –æ–ø–ª–∞—Ç–∏–ª üöª')
def handle_backdoor(message):

    client = Client.objects.get_or_create(tg_id=message.from_user.id)[0]
    client.name = message.from_user.first_name
    client.username = message.from_user.username
    client.save()

    kb_main_menu = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    kb_main_menu_btn = (
        KeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ üçîüçüü•©'),
        KeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üÜî'),
        KeyboardButton(text='–ú–æ–∏ —Ç–æ–ø–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã üß°')
    )

    kb_main_menu.add(*kb_main_menu_btn)
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π!', reply_markup=kb_main_menu)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ üçîüçüü•©')
def handle_category(message):
    kb_category = ReplyKeyboardMarkup()
    kb_category_btn = (
        KeyboardButton(text='–°—É–ø—ã'),
        KeyboardButton(text='–ì–æ—Ä—è—á–µ–µ –±–ª—é–¥–æ'),
        KeyboardButton(text='–î–µ—Å–µ—Ä—Ç')
    )
    kb_category.add(*kb_category_btn)
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞', reply_markup=kb_category)


@bot.message_handler(func=lambda message: message.text == '–°—É–ø—ã')
def handle_soup_category(message):
    soup_recipe = get_random_recipe('–°—É–ø—ã')
    bot.send_message(message.chat.id, f'–í–æ—Ç —Ä–µ—Ü–µ–ø—Ç —Å—É–ø–∞:\n{soup_recipe}')


@bot.message_handler(func=lambda message: message.text == '–ì–æ—Ä—è—á–µ–µ –±–ª—é–¥–æ')
def handle_hot_dish_category(message):
    hot_dish_recipe = get_random_recipe('–ì–æ—Ä—è—á–µ–µ –±–ª—é–¥–æ').title
    bot.send_message(message.chat.id, f'–í–æ—Ç —Ä–µ—Ü–µ–ø—Ç –≥–æ—Ä—è—á–µ–≥–æ –±–ª—é–¥–∞:\n{hot_dish_recipe}')


@bot.message_handler(func=lambda message: message.text == '–î–µ—Å–µ—Ä—Ç')
def handle_dessert_category(message):
    dessert_recipe = get_random_recipe('–î–µ—Å–µ—Ä—Ç').title
    bot.send_message(message.chat.id, f'–í–æ—Ç —Ä–µ—Ü–µ–ø—Ç –¥–µ—Å–µ—Ä—Ç–∞:\n{dessert_recipe}')


def get_random_recipe(category_name):
    category = Categories.objects.get(category=category_name)
    recipes = Recipe.objects.filter(category=category)
    recipe = random.choice(recipes)
    return recipe


def main():
    bot.polling(skip_pending=True)


class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ'

    def handle(self, *args, **options):
        while True:
            try:
                main()
            except Exception as error:
                print(error)
                raise SystemExit


if __name__ == '__main__':
    main()
