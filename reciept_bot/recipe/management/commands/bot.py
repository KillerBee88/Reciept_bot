import datetime
import random
from datetime import timedelta, datetime
from django.core.management.base import BaseCommand
from django.utils import timezone
from decimal import Decimal
from reciept_bot.settings import TELEGRAM_TOKEN
from telebot import TeleBot
from telebot.types import KeyboardButton, ReplyKeyboardMarkup
from recipe.models import Recipe, Subscription, Categories, Client, LikeDislike, UserLimitView

bot = TeleBot(TELEGRAM_TOKEN, threaded=False)


@bot.message_handler(commands=['start'])
def main_menu(message):
    bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    welcome_message = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n–ü–æ–ª—É—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑—å —Å–≤–æ–µ –º–µ–Ω—é'
    client = Client.objects.get_or_create(tg_id=message.from_user.id)[0]
    client.name = message.from_user.first_name
    client.username = message.from_user.username
    client.save()
    subscription = Subscription.objects.filter(client=client)
    if not subscription.exists():
        Subscription.objects.create(client=client, subscription_is_active=False)
        UserLimitView.objects.create(user=client)

    kb_main_menu = get_main_menu_kb()
    bot.send_message(message.chat.id, welcome_message, reply_markup=kb_main_menu)


@bot.message_handler(func=lambda message: message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üÜî')
def get_profile_info(message):
    client = Client.objects.get(tg_id=message.from_user.id)

    subscription_duration = Subscription.objects.get(client=client).subscription_duration
    update_subscription_time(subscription_duration, client)
    duration = format_duration(subscription_duration)
    subscription_is_active = Subscription.objects.get(client=client).subscription_is_active
    vegan = client.vegetarian
    if subscription_is_active:
        profile_msg = f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n' \
                      f'–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑:\n ' \
                      f'{duration}'
        kb_profile = ReplyKeyboardMarkup(resize_keyboard=True)
        if vegan:
            vegan_btn = KeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–¢—Ä–∞–≤–æ—è–¥–Ω—ã–π"')
        else:
            vegan_btn = KeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–¢—Ä–∞–≤–æ—è–¥–Ω—ã–π"')

        kb_profile_btn = [
            KeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'),
            vegan_btn,
            KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô')
        ]
        kb_profile.add(*kb_profile_btn)
    else:
        view_limit = UserLimitView.objects.get(user=client)
        profile_msg = f'–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n' \
                      f'–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {view_limit.views_left} –ø—Ä–æ—Å–º–æ—Ç—Ä(–∞)\n' \
                      f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø—É "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É" –¥–ª—è –µ–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è'

        kb_profile = ReplyKeyboardMarkup()
        kb_profile_btn = [
            KeyboardButton(text='–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É'),
            KeyboardButton(text='–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–¢—Ä–∞–≤–æ—è–¥–Ω—ã–π"'),
            KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô')
        ]
        kb_profile.add(*kb_profile_btn)

    bot.send_message(message.chat.id, profile_msg, reply_markup=kb_profile)


@bot.message_handler(func=lambda message:message.text == '–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–¢—Ä–∞–≤–æ—è–¥–Ω—ã–π"')
def handler_activate_killer_mode(message):
    client = Client.objects.get(tg_id=message.from_user.id)
    client.vegetarian = True
    client.save()
    kb_main = get_main_menu_kb()
    bot.send_message(message.chat.id, '–†–µ–∂–∏–º "–∞—Å–∞—Å–∏–Ω" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', reply_markup=kb_main)


@bot.message_handler(func=lambda message:message.text == '–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–¢—Ä–∞–≤–æ—è–¥–Ω—ã–π"')
def handler_deactivate_killer_mode(message):
    client = Client.objects.get(tg_id=message.from_user.id)
    client.vegetarian = False
    client.save()
    kb_main = get_main_menu_kb()
    bot.send_message(message.chat.id, '–†–µ–∂–∏–º "–∞—Å–∞—Å–∏–Ω" –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', reply_markup=kb_main)


@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ —Ç–æ–ø–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã üß°')
def handler_get_my_top_recipes(message):
    client = Client.objects.get(tg_id=message.from_user.id)
    top_recipes = LikeDislike.objects.filter(client=client)


@bot.message_handler(func=lambda message: message.text == '–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É' or message.text == '–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
def buy_subscription(message):
    kb_subscription = ReplyKeyboardMarkup(resize_keyboard=True)
    kb_subscription_btn = (
        KeyboardButton(text='1Ô∏è‚É£ –¥–µ–Ω—å'),
        KeyboardButton(text='7Ô∏è‚É£ –¥–Ω–µ–π'),
        KeyboardButton(text='3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π'),
        KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô')
    )
    kb_subscription.add(*kb_subscription_btn)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–ª–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup=kb_subscription)


@bot.message_handler(func=lambda message: message.text == '1Ô∏è‚É£ –¥–µ–Ω—å' or message.text == '7Ô∏è‚É£ –¥–Ω–µ–π' or
                     message.text == '3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π')
def pay_subscription(message):
    client = Client.objects.get(tg_id=message.from_user.id)
    subscription = Subscription.objects.get(client=client)
    subscription.subscription_duration = timedelta(days=0)
    if message.text == '1Ô∏è‚É£ –¥–µ–Ω—å':
        subscription.subscription_duration += timedelta(days=1)
        subscription.subscription_price += Decimal(10.00)
    elif message.text == '7Ô∏è‚É£ –¥–Ω–µ–π':
        subscription.subscription_duration += timedelta(days=7)
        subscription.subscription_price += Decimal(16.49)
    elif message.text == '3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π':
        subscription.subscription_duration += timedelta(days=30)
        subscription.subscription_price += Decimal(25.99)

    kb_main_menu = get_main_menu_kb()
    subscription.subscription_date = datetime.now()
    subscription.subscription_is_active = True
    subscription.save()
    pay_subscription_msg = f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {message.text}'

    bot.send_message(message.chat.id, pay_subscription_msg, reply_markup=kb_main_menu)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ üçîüçüü•©')
def handle_category(message):
    kb_category = ReplyKeyboardMarkup(resize_keyboard=True)
    kb_category_btn = (
        KeyboardButton(text='–°—É–ø—ã'),
        KeyboardButton(text='–ì–æ—Ä—è—á–µ–µ –±–ª—é–¥–æ'),
        KeyboardButton(text='–î–µ—Å–µ—Ä—Ç'),
        (KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô'))

    )
    kb_category.add(*kb_category_btn)
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞', reply_markup=kb_category)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô')
def back_to_main_menu(message):
    main_menu_message = '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'
    kb_main_menu = get_main_menu_kb()
    bot.send_message(message.chat.id, main_menu_message, reply_markup=kb_main_menu)


@bot.message_handler(func=lambda message: message.text.startswith('–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è'))
def handle_get_ingredients(message):
    recipe_title = message.text.split('–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è "')[1].split('"')[0]
    ingredients = Recipe.objects.get(title=recipe_title).ingredients
    kb_ingredients = ReplyKeyboardMarkup()
    kb_ingredients_btn = (
        KeyboardButton(text=f'–°–∫–∞—á–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç "{recipe_title}"'),
        KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô')
    )
    kb_ingredients.add(*kb_ingredients_btn)
    bot.send_message(message.chat.id, ingredients, reply_markup=kb_ingredients)


@bot.message_handler(func=lambda message: message.text.startswith('–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–∏ —Ç–æ–ø —Ä–µ—Ü–µ–ø—Ç—ã'))
def handler_add_to_my_top_recipe(message):
    client = Client.objects.get(tg_id=message.from_user.id)
    recipe_title = message.text.split('–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–∏ —Ç–æ–ø —Ä–µ—Ü–µ–ø—Ç—ã "')[1].split('"')[0]
    recipe = Recipe.objects.get(title=recipe_title)
    like = LikeDislike.objects.get_or_create(client=client, recipe=recipe, action=True)[0]
    like.save()
    bot.send_message(message.chat.id, f'–†–µ—Ü–µ–ø—Ç {recipe_title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ —Ç–æ–ø –±–ª—é–¥–∞')


@bot.message_handler(func=lambda message: message.text.startswith('–ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'))
def handler_get_another_recipe(message):
    category = message.text.split('–ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "')[1].split('"')[0]
    get_recipe(bot, message.chat.id, category)


@bot.message_handler(func=lambda message: message.text == '–°—É–ø—ã' or message.text == '–ì–æ—Ä—è—á–µ–µ –±–ª—é–¥–æ' or
                     message.text == '–î–µ—Å–µ—Ä—Ç')
def handle_recipe_category(message):
    client = Client.objects.get(tg_id=message.from_user.id)
    subscription_duration = Subscription.objects.get(client=client).subscription_duration
    update_subscription_time(subscription_duration, client)
    get_recipe(bot, message, message.text)


def format_duration(duration):
    days, seconds = duration.days, duration.seconds
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    formatted_duration = f"{days:02d} –¥–Ω–µ–π:{hours:02d} —á–∞—Å–æ–≤:{minutes:02d} –º–∏–Ω—É—Ç"
    return formatted_duration


def get_random_recipe(category_name):
    category = Categories.objects.get(category=category_name)
    recipes = Recipe.objects.filter(category=category)
    recipe = random.choice(recipes)
    cooking_time = f'–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {recipe.cooking_time} –º–∏–Ω—É—Ç'
    descr = f'–°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:\n{recipe.description}'
    return recipe, cooking_time, descr


def get_recipe(bot, chat_id, category):
    client = Client.objects.get(tg_id=chat_id)
    subscription_active = Subscription.objects.get(client=client).subscription_is_active
    limit_view = UserLimitView.objects.get(user=client)

    if subscription_active or not subscription_active and limit_view.views_left > 0:
        recipe, cooking_time, descr = get_random_recipe(category)
        kb_additional_info = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        kb_add_info_btn = (
            KeyboardButton(text=f'–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è "{recipe.title}"'),
            KeyboardButton(text=f'–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–∏ —Ç–æ–ø —Ä–µ—Ü–µ–ø—Ç—ã "{recipe.title}"'),
            KeyboardButton(text=f'–ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{recipe.category}"'),
            KeyboardButton(text=f'–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô'),

        )
        kb_additional_info.add(*kb_add_info_btn)

        bot.send_message(chat_id, f'–í–æ—Ç –≤–∞—à —Ä–µ—Ü–µ–ø—Ç:\n{recipe.title}')
        bot.send_photo(chat_id, recipe.image)
        bot.send_message(chat_id, cooking_time)
        bot.send_message(chat_id, descr, reply_markup=kb_additional_info)

        if not subscription_active:
            limit_view.views_left -= 1
            limit_view.save()
    else:
        kb_buy_subscription = ReplyKeyboardMarkup()
        kb_buy_subscription_btn = [
            KeyboardButton(text='–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É'),
            KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é üîô')
        ]
        kb_buy_subscription.add(*kb_buy_subscription_btn)

        bot.send_message(chat_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–∫–∞–∑—ã –¥–ª—è –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å,\n—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å '
                                          '–ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É', reply_markup=kb_buy_subscription)


def get_main_menu_kb():
    kb_main_menu = ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True, resize_keyboard=True)
    kb_main_menu_btn = (
        KeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ üçîüçüü•©'),
        KeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üÜî'),
        KeyboardButton(text='–ú–æ–∏ —Ç–æ–ø–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã üß°')
    )
    kb_main_menu.add(*kb_main_menu_btn)
    return kb_main_menu


def update_subscription_time(time: datetime, client: Client):
    now = timezone.now()
    subscription = Subscription.objects.get(client=client)
    subscription_time = subscription.subscription_date + time - now
    subscription.subscription_duration = subscription_time
    if subscription_time.total_seconds() <= 0:
        subscription.subscription_is_active = False
    subscription.save()


def main():
    bot.polling(skip_pending=True)


class Command(BaseCommand):
    help = '–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ'

    def handle(self, *args, **options):
        while True:
            try:
                main()
            except Exception as error:
                print(error)
                raise SystemExit


if __name__ == '__main__':
    main()
